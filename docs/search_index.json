[["index.html", "R algorithm notes Chapter 1 About", " R algorithm notes Yao-Chung 2021-12-22 Chapter 1 About This notebook is created for recording algorithms written in R, as well as its application timing and examples. "],["ab-test.html", "Chapter 2 A/B test 2.1 Scenario 2.2 Case study", " Chapter 2 A/B test 2021-12-22 updated A/B test is used for testing which version of product can give you a preferable outcome by setting two versions of a product/test with only one variable is different (which is version A and version B). A is usually the “current version” and B is often the “improved version”. 2.1 Scenario For someone who wants to test new feature on product. A: Offer ends this Saturday! Please use promotion code A B: The offer is about to end, please use promotion code B Send these message to a population and see which one get more clicks or sell more products. For a more persuasive result, a statistical test should be used to test if it is a significant result. 2.2 Case study ref In short, we want to test two variant design on a hotel booking website. Based on result, make recommendation to your stakeholders. library(tidyverse) urlfile &lt;- &quot;https://raw.githubusercontent.com/etomaa/A-B-Testing/master/data/Website%20Results.csv&quot; df &lt;- read_csv(url(urlfile), show_col_types = FALSE) glimpse(df) ## Rows: 1,451 ## Columns: 4 ## $ variant &lt;chr&gt; &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;,… ## $ converted &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, F… ## $ length_of_stay &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ revenue &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00,… variant A: current website (control group) variant B: experimental group (to see if new feature increase the conversion) converted: if TRUE, it means that the customer completes bookings and it’s going to show FALSE when the customer visits the sites but not makes a booking. Test Hypothesis: - Null hypothesis: Pcont_A = Pcont_B - Alternative hypothesis: Pcont_A != Pcont_B # conversion rate A conversion_subset_A &lt;- df %&gt;% filter(variant == &quot;A&quot; &amp; converted == &quot;TRUE&quot;) conversions_A &lt;- nrow(conversion_subset_A) visitors_A &lt;- nrow(df %&gt;% filter(variant == &quot;A&quot;)) conv_rate_A &lt;- (conversions_A/visitors_A) # conversion rate B conversion_subset_B &lt;- df %&gt;% filter(variant == &quot;B&quot; &amp; converted == &quot;TRUE&quot;) conversions_B &lt;- nrow(conversion_subset_B) visitors_B &lt;- nrow(df %&gt;% filter(variant == &quot;B&quot;)) conv_rate_B &lt;- (conversions_B/visitors_B) print(paste0(&quot;conversion rates of A and B are &quot;, round(conv_rate_A, 4), &quot; and &quot;, round(conv_rate_B, 4))) ## [1] &quot;conversion rates of A and B are 0.0277 and 0.0507&quot; Then we compute the relative uplift using the conversion rates A &amp; B. uplift &lt;- (conv_rate_B - conv_rate_A) / conv_rate_A * 100 uplift ## [1] 82.71918 B is better 83% than A. This is high enough to decide a winner. However, we need to use statistical methods to give a more precise result. # Pooled sample proportion for variants A &amp; B p_pool &lt;- (conversions_A + conversions_B) / (visitors_A + visitors_B) # Let&#39;s compute Standard error for variants A &amp; B (SE_pool) SE_pool &lt;- sqrt(p_pool * (1 - p_pool) * ((1 / visitors_A) + (1 / visitors_B))) # Let&#39;s compute the margin of error for the pool MOE &lt;- SE_pool * qnorm(0.975) # Point Estimate or Difference in proportion d_hat &lt;- conv_rate_B - conv_rate_A # compute the Z-score so we can determine the p-value z_score &lt;- d_hat / SE_pool cat(paste0(&quot;The pooled probabilty is &quot;, round(p_pool, 4), &quot;.\\nStandard error is &quot;, round(SE_pool, 4), &quot;.\\nMargin of error is &quot;, round(MOE, 4), &quot;.\\nDifference in proportion of variants A &amp; B is &quot;, round(d_hat,4), &quot;.\\nZ score is &quot;, round(z_score, 4))) ## The pooled probabilty is 0.0393. ## Standard error is 0.0102. ## Margin of error is 0.02. ## Difference in proportion of variants A &amp; B is 0.0229. ## Z score is 2.2495 Using Z-score, we can quickly determine the p-value via a look-up table, or using code below. Also conpute the confidence interval for the pool p_value &lt;- pnorm(q = -z_score, mean = 0, sd = 1) * 2 ci &lt;- c(d_hat - MOE, d_hat + MOE) # confidence interval of variant A X_hat_A &lt;- conversions_A / visitors_A se_hat_A &lt;- sqrt(X_hat_A * (1 - X_hat_A) / visitors_A) ci_A &lt;- c(X_hat_A - qnorm(0.975) * se_hat_A, X_hat_A + qnorm(0.975) * se_hat_A) # confidence interval of variant B X_hat_B &lt;- conversions_B / visitors_B se_hat_B &lt;- sqrt(X_hat_B * (1 - X_hat_B) / visitors_B) ci_B &lt;- c(X_hat_B - qnorm(0.975) * se_hat_B, X_hat_B + qnorm(0.975) * se_hat_B) cat(paste0(&quot;p value is &quot;, round(p_value, 4), &quot;\\nConfidence interval is &quot;, list(round(ci, 4)), &quot;\\nConfidence interval of A is &quot;, list(round(ci_A, 4)),&quot;\\nConfidence interval of B is &quot;, list(round(ci_B, 4)))) ## p value is 0.0245 ## Confidence interval is c(0.003, 0.0429) ## Confidence interval of A is c(0.0158, 0.0397) ## Confidence interval of B is c(0.0348, 0.0666) Show the computation result in table: vis_result_pool &lt;- data.frame( metric = c( &#39;Estimated Difference&#39;, &#39;Relative Uplift(%)&#39;, &#39;pooled sample proportion&#39;, &#39;Standard Error of Difference&#39;, &#39;z_score&#39;, &#39;p-value&#39;, &#39;Margin of Error&#39;, &#39;CI-lower&#39;, &#39;CI-upper&#39;), value = c( conv_rate_B - conv_rate_A, uplift, p_pool, SE_pool, z_score, p_value, MOE, ci[1], ci[2] )) vis_result_pool ## metric value ## 1 Estimated Difference 0.022945680 ## 2 Relative Uplift(%) 82.719178082 ## 3 pooled sample proportion 0.039283253 ## 4 Standard Error of Difference 0.010200138 ## 5 z_score 2.249546089 ## 6 p-value 0.024477774 ## 7 Margin of Error 0.019991903 ## 8 CI-lower 0.002953777 ## 9 CI-upper 0.042937584 Recommendation and Conclusion * Variant A has 20 conversions and 721 hits whereas Variant B has 37 conversions and 730 hits. * Relative uplift of 82.72% based on a variant A conversion rate is 2.77% and for B is 5.07%. Hence, variant B is better than A by 82.72%. * For this analysis P-value computed was 0.02448. Hence, there is strong statistical significance in test results. * From the above results that depict strong statistical significance. You should reject the null hypothesis and proceed with the launch. * Therefore, Accept Variant B and you can roll it to the users for 100%. Limitations It is one of the tools for conversion optimization and it’s not an independent solution and it’s not going to fix all the conversion issues of ours and it can’t fix the issues as you get with messy data and you need to perform more than just an A/B test to improve on conversions. "],["k-means.html", "Chapter 3 K-means", " Chapter 3 K-means 2021-12-22 updated K-means clustering: It is a method to cluster n points into k clusters based on the means of shortest distance. (cautsion: do not confused it with K-nearest clustering). We use the demo data sets “USArrests”. data(&quot;USArrests&quot;) df &lt;- USArrests head(df) ## Murder Assault UrbanPop Rape ## Alabama 13.2 236 58 21.2 ## Alaska 10.0 263 48 44.5 ## Arizona 8.1 294 80 31.0 ## Arkansas 8.8 190 50 19.5 ## California 9.0 276 91 40.6 ## Colorado 7.9 204 78 38.7 # scaling the data df &lt;- scale(df) head(df) ## Murder Assault UrbanPop ## Alabama 1.24256408 0.7828393 -0.5209066 ## Alaska 0.50786248 1.1068225 -1.2117642 ## Arizona 0.07163341 1.4788032 0.9989801 ## Arkansas 0.23234938 0.2308680 -1.0735927 ## California 0.27826823 1.2628144 1.7589234 ## Colorado 0.02571456 0.3988593 0.8608085 ## Rape ## Alabama -0.003416473 ## Alaska 2.484202941 ## Arizona 1.042878388 ## Arkansas -0.184916602 ## California 2.067820292 ## Colorado 1.864967207 We use factoextra package to create beautiful clusters visualization We also use fviz_nbclust to determine the optimal number of clusters set.seed(123) fviz_nbclust(df, kmeans, method=&quot;wss&quot;) + geom_vline(xintercept = 4, linetype = 2) set.seed(123) (km.res &lt;- kmeans(df, centers = 4, nstart = 25)) ## K-means clustering with 4 clusters of sizes 8, 13, 16, 13 ## ## Cluster means: ## Murder Assault UrbanPop Rape ## 1 1.4118898 0.8743346 -0.8145211 0.01927104 ## 2 -0.9615407 -1.1066010 -0.9301069 -0.96676331 ## 3 -0.4894375 -0.3826001 0.5758298 -0.26165379 ## 4 0.6950701 1.0394414 0.7226370 1.27693964 ## ## Clustering vector: ## Alabama Alaska Arizona ## 1 4 4 ## Arkansas California Colorado ## 1 4 4 ## Connecticut Delaware Florida ## 3 3 4 ## Georgia Hawaii Idaho ## 1 3 2 ## Illinois Indiana Iowa ## 4 3 2 ## Kansas Kentucky Louisiana ## 3 2 1 ## Maine Maryland Massachusetts ## 2 4 3 ## Michigan Minnesota Mississippi ## 4 2 1 ## Missouri Montana Nebraska ## 4 2 2 ## Nevada New Hampshire New Jersey ## 4 2 3 ## New Mexico New York North Carolina ## 4 4 1 ## North Dakota Ohio Oklahoma ## 2 3 3 ## Oregon Pennsylvania Rhode Island ## 3 3 3 ## South Carolina South Dakota Tennessee ## 1 2 1 ## Texas Utah Vermont ## 4 3 2 ## Virginia Washington West Virginia ## 3 3 2 ## Wisconsin Wyoming ## 2 3 ## ## Within cluster sum of squares by cluster: ## [1] 8.316061 11.952463 16.212213 19.922437 ## (between_SS / total_SS = 71.2 %) ## ## Available components: ## ## [1] &quot;cluster&quot; &quot;centers&quot; &quot;totss&quot; ## [4] &quot;withinss&quot; &quot;tot.withinss&quot; &quot;betweenss&quot; ## [7] &quot;size&quot; &quot;iter&quot; &quot;ifault&quot; There are 7 Avaliable components you can access it. Compute the mean of each variables by clustering using the original data: aggregate(USArrests, by=list(cluster=km.res$cluster), mean) ## cluster Murder Assault UrbanPop Rape ## 1 1 13.93750 243.62500 53.75000 21.41250 ## 2 2 3.60000 78.53846 52.07692 12.17692 ## 3 3 5.65625 138.87500 73.87500 18.78125 ## 4 4 10.81538 257.38462 76.00000 33.19231 Display results with your cluster result: dd &lt;- cbind(USArrests, cluster = km.res$cluster) head(dd) ## Murder Assault UrbanPop Rape cluster ## Alabama 13.2 236 58 21.2 1 ## Alaska 10.0 263 48 44.5 4 ## Arizona 8.1 294 80 31.0 4 ## Arkansas 8.8 190 50 19.5 1 ## California 9.0 276 91 40.6 4 ## Colorado 7.9 204 78 38.7 4 Plot the clustering result using factoextra package library(factoextra) fviz_cluster(km.res, df, palette=&quot;Set2&quot;, ggtheme = theme_minimal()) #points(km.res$centers, col = 1:2, pch = 8, cex=2) Reference: here "],["knn-k-nearest-neighbors.html", "Chapter 4 kNN (k-Nearest Neighbors) 4.1 Difference calculating the distance: (1) Euclidean (2) Manhatten (3) Cosine (4) Jaccard Coefficient (5) MinKowski 4.2 Find the k nearest neighbors", " Chapter 4 kNN (k-Nearest Neighbors) 2021-12-22 updated Ref: distance Ref: tutorial 4.1 Difference calculating the distance: (1) Euclidean (2) Manhatten (3) Cosine (4) Jaccard Coefficient (5) MinKowski # Euclidean distance euclidean_distance &lt;- function(a, b) { # We check that they have the same number of observation if (length(a) == length(b)) { sqrt(sum((a-b)^2)) } else { stop(&quot;Vectors must be of the same length&quot;) } } euclidean_distance(1:10, 11:20) ## [1] 31.62278 # Manhattan distance manhattan_distance &lt;- function(a, b) { # We check that they have the same number of observation if (length(a) == length(b)) { sum(abs(a-b)) } else { stop(&quot;Vectors must be of the same length&quot;) } } manhattan_distance(1:10, 11:20) ## [1] 100 # Cosine similarity cos_similarity &lt;- function(a, b) { if (length(a) == length(b)) { num = sum(a * b, na.rm = T) den = sqrt(sum(a^2, na.rm = T)) * sqrt(sum(b^2, na.rm = T)) result = num/den 1 - result # because cos(0)=1 } else { stop (1:10, 11:20) } } cos_similarity(1:10, 11:20) ## [1] 0.0440877 # measure the degree of similarity of two vectors # all values are equal = 1 # all values are different = 0 jaccard &lt;- function(a, b) { if (length(a) == length(b)) { intersection &lt;- length(intersect(a,b)) union &lt;- length(a) + length(b) - intersection intersection/union } else { stop(&quot;Vectors must be of the same length&quot;) } } jaccard(1:10, 11:20) ## [1] 0 minkowski_distance &lt;- function(a, b, p) { # p=1, Manhattan distance # p=2, Euclidean distance if (p &lt;= 0) { stop(&quot;p must be higher than 0&quot;) } if (length(a) == length(b)) { sum(abs(a-b)^p)^(1/p) } else { stop(&quot;Vectors must be of the same length&quot;) } } (minkowski_distance(1:10, 11:20, 1)) ## [1] 100 (minkowski_distance(1:10, 11:20, 2)) ## [1] 31.62278 We need to based on the type of data, the dimensions, and the business objective to decide which method we are going to use. For example, Manhattan is good for the closet route that a taxi must take. 4.2 Find the k nearest neighbors The process includes: (1) Check the number of observations is the same (2) Calculate distance (3) Find the closest neighbors. In the following, we use Boston house price data to demo KNN: library(MASS) data(Boston) str(Boston) ## &#39;data.frame&#39;: 506 obs. of 14 variables: ## $ crim : num 0.00632 0.02731 0.02729 0.03237 0.06905 ... ## $ zn : num 18 0 0 0 0 0 12.5 12.5 12.5 12.5 ... ## $ indus : num 2.31 7.07 7.07 2.18 2.18 2.18 7.87 7.87 7.87 7.87 ... ## $ chas : int 0 0 0 0 0 0 0 0 0 0 ... ## $ nox : num 0.538 0.469 0.469 0.458 0.458 0.458 0.524 0.524 0.524 0.524 ... ## $ rm : num 6.58 6.42 7.18 7 7.15 ... ## $ age : num 65.2 78.9 61.1 45.8 54.2 58.7 66.6 96.1 100 85.9 ... ## $ dis : num 4.09 4.97 4.97 6.06 6.06 ... ## $ rad : int 1 2 2 3 3 3 5 5 5 5 ... ## $ tax : num 296 242 242 222 222 222 311 311 311 311 ... ## $ ptratio: num 15.3 17.8 17.8 18.7 18.7 18.7 15.2 15.2 15.2 15.2 ... ## $ black : num 397 397 393 395 397 ... ## $ lstat : num 4.98 9.14 4.03 2.94 5.33 ... ## $ medv : num 24 21.6 34.7 33.4 36.2 28.7 22.9 27.1 16.5 18.9 ... library(caret) set.seed(1) model &lt;- train( medv ~ ., data = Boston, method = &quot;knn&quot; ) model ## k-Nearest Neighbors ## ## 506 samples ## 13 predictor ## ## No pre-processing ## Resampling: Bootstrapped (25 reps) ## Summary of sample sizes: 506, 506, 506, 506, 506, 506, ... ## Resampling results across tuning parameters: ## ## k RMSE Rsquared MAE ## 5 6.774213 0.4788519 4.616781 ## 7 6.709875 0.4771239 4.635036 ## 9 6.746559 0.4654866 4.690258 ## ## RMSE was used to select the optimal model using ## the smallest value. ## The final value used for the model was k = 7. plot(model) Caret provide preprocessing method before we run our data. set.seed(1) model2 &lt;- train( medv ~ ., data = Boston, method = &quot;knn&quot;, preProcess = c(&quot;center&quot;, &quot;scale&quot;) ) model2 ## k-Nearest Neighbors ## ## 506 samples ## 13 predictor ## ## Pre-processing: centered (13), scaled (13) ## Resampling: Bootstrapped (25 reps) ## Summary of sample sizes: 506, 506, 506, 506, 506, 506, ... ## Resampling results across tuning parameters: ## ## k RMSE Rsquared MAE ## 5 4.827696 0.7297751 3.048151 ## 7 4.793191 0.7373525 3.043650 ## 9 4.788986 0.7410578 3.070081 ## ## RMSE was used to select the optimal model using ## the smallest value. ## The final value used for the model was k = 9. Splitting the dataset (prevent overfitting) set.seed(1) inTraining &lt;- createDataPartition(Boston$medv, p = .80, list = FALSE) training &lt;- Boston[inTraining, ] testing &lt;- Boston[-inTraining, ] model3 &lt;- train( medv ~., data = training, method = &quot;knn&quot;, preProcess = c(&quot;center&quot;, &quot;scale&quot;) ) model3 ## k-Nearest Neighbors ## ## 407 samples ## 13 predictor ## ## Pre-processing: centered (13), scaled (13) ## Resampling: Bootstrapped (25 reps) ## Summary of sample sizes: 407, 407, 407, 407, 407, 407, ... ## Resampling results across tuning parameters: ## ## k RMSE Rsquared MAE ## 5 4.948949 0.7111926 3.228177 ## 7 5.008726 0.7072326 3.240362 ## 9 5.049853 0.7042396 3.281286 ## ## RMSE was used to select the optimal model using ## the smallest value. ## The final value used for the model was k = 5. See the performance of our model test.features &lt;- subset(testing, select=-c(medv)) test.target &lt;- subset(testing, select=medv)[,1] predictions = predict(model3, newdata = test.features) # RMSE (sqrt(mean((test.target - predictions)^2))) ## [1] 4.563839 # R squared (cor(test.target, predictions) ^ 2 ) ## [1] 0.7814887 Cross validation set.seed(1) ctrl &lt;- trainControl( method = &quot;cv&quot;, number = 10 ) model4 &lt;- train( medv ~ ., data = training, method = &quot;knn&quot;, preProcess = c(&quot;center&quot;, &quot;scale&quot;), trControl = ctrl ) (model4) ## k-Nearest Neighbors ## ## 407 samples ## 13 predictor ## ## Pre-processing: centered (13), scaled (13) ## Resampling: Cross-Validated (10 fold) ## Summary of sample sizes: 367, 366, 367, 366, 365, 367, ... ## Resampling results across tuning parameters: ## ## k RMSE Rsquared MAE ## 5 4.616138 0.7518673 3.064657 ## 7 4.734625 0.7404093 3.151517 ## 9 4.677503 0.7508160 3.156651 ## ## RMSE was used to select the optimal model using ## the smallest value. ## The final value used for the model was k = 5. plot(model4) # To see if model4 is better than model3 test.features &lt;- subset(testing, select=-c(medv)) test.target &lt;- subset(testing, select=medv)[,1] predictions = predict(model4, newdata = test.features) # RMSE (sqrt(mean((test.target - predictions)^2))) ## [1] 4.563839 # R squared (cor(test.target, predictions) ^ 2 ) ## [1] 0.7814887 We use lambda to tune the hyper parameters set.seed(1) tuneGrid &lt;- expand.grid( k = seq(5, 9, by = 1) ) model5 &lt;- train( medv ~., data = training, method = &quot;knn&quot;, preProcess = c(&quot;center&quot;, &quot;scale&quot;), trControl = ctrl, tuneGrid = tuneGrid ) (model5) ## k-Nearest Neighbors ## ## 407 samples ## 13 predictor ## ## Pre-processing: centered (13), scaled (13) ## Resampling: Cross-Validated (10 fold) ## Summary of sample sizes: 367, 366, 367, 366, 365, 367, ... ## Resampling results across tuning parameters: ## ## k RMSE Rsquared MAE ## 5 4.616138 0.7518673 3.064657 ## 6 4.754269 0.7386282 3.162237 ## 7 4.734625 0.7404093 3.151517 ## 8 4.656271 0.7508317 3.133727 ## 9 4.677503 0.7508160 3.156651 ## ## RMSE was used to select the optimal model using ## the smallest value. ## The final value used for the model was k = 5. plot(model5) "],["footnotes-and-citations.html", "Chapter 5 Footnotes and citations 5.1 Footnotes 5.2 Citations", " Chapter 5 Footnotes and citations 5.1 Footnotes Footnotes are put inside the square brackets after a caret ^[]. Like this one 1. 5.2 Citations Reference items in your bibliography file(s) using @key. For example, we are using the bookdown package (Xie 2021) (check out the last code chunk in index.Rmd to see how this citation key was added) in this sample book, which was built on top of R Markdown and knitr (Xie 2015) (this citation was added manually in an external file book.bib). Note that the .bib files need to be listed in the index.Rmd with the YAML bibliography key. The RStudio Visual Markdown Editor can also make it easier to insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations References "],["blocks.html", "Chapter 6 Blocks 6.1 Equations 6.2 Theorems and proofs 6.3 Callout blocks", " Chapter 6 Blocks 6.1 Equations Here is an equation. \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{6.1} \\end{equation}\\] You may refer to using \\@ref(eq:binom), like see Equation (6.1). 6.2 Theorems and proofs Labeled theorems can be referenced in text using \\@ref(thm:tri), for example, check out this smart theorem 6.1. Theorem 6.1 For a right triangle, if \\(c\\) denotes the length of the hypotenuse and \\(a\\) and \\(b\\) denote the lengths of the other two sides, we have \\[a^2 + b^2 = c^2\\] Read more here https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html. 6.3 Callout blocks The R Markdown Cookbook provides more help on how to use custom blocks to design your own callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html "],["sharing-your-book.html", "Chapter 7 Sharing your book 7.1 Publishing 7.2 404 pages 7.3 Metadata for sharing", " Chapter 7 Sharing your book 7.1 Publishing HTML books can be published online, see: https://bookdown.org/yihui/bookdown/publishing.html 7.2 404 pages By default, users will be directed to a 404 page if they try to access a webpage that cannot be found. If you’d like to customize your 404 page instead of using the default, you may add either a _404.Rmd or _404.md file to your project root and use code and/or Markdown syntax. 7.3 Metadata for sharing Bookdown HTML books will provide HTML metadata for social sharing on platforms like Twitter, Facebook, and LinkedIn, using information you provide in the index.Rmd YAML. To setup, set the url for your book and the path to your cover-image file. Your book’s title and description are also used. This gitbook uses the same social sharing data across all chapters in your book- all links shared will look the same. Specify your book’s source repository on GitHub using the edit key under the configuration options in the _output.yml file, which allows users to suggest an edit by linking to a chapter’s source file. Read more about the features of this output format here: https://pkgs.rstudio.com/bookdown/reference/gitbook.html Or use: ?bookdown::gitbook "],["references.html", "References", " References "],["cross.html", "Chapter 8 Cross-references 8.1 Chapters and sub-chapters 8.2 Captioned figures and tables", " Chapter 8 Cross-references Cross-references make it easier for your readers to find and link to elements in your book. 8.1 Chapters and sub-chapters There are two steps to cross-reference any heading: Label the heading: # Hello world {#nice-label}. Leave the label off if you like the automated heading generated based on your heading title: for example, # Hello world = # Hello world {#hello-world}. To label an un-numbered heading, use: # Hello world {-#nice-label} or {# Hello world .unnumbered}. Next, reference the labeled heading anywhere in the text using \\@ref(nice-label); for example, please see Chapter 8. If you prefer text as the link instead of a numbered reference use: any text you want can go here. 8.2 Captioned figures and tables Figures and tables with captions can also be cross-referenced from elsewhere in your book using \\@ref(fig:chunk-label) and \\@ref(tab:chunk-label), respectively. See Figure 8.1. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 8.1: Here is a nice figure! Don’t miss Table 8.1. knitr::kable( head(pressure, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 8.1: Here is a nice table! temperature pressure 0 0.0002 20 0.0012 40 0.0060 60 0.0300 80 0.0900 100 0.2700 120 0.7500 140 1.8500 160 4.2000 180 8.8000 https://www.tidymodels.org/start/models/ Use sea urchins data urchins &lt;- read_csv(&quot;https://tidymodels.org/start/models/urchins.csv&quot;) %&gt;% setNames(c(&quot;food_regime&quot;, &quot;initial_volume&quot;, &quot;width&quot;)) %&gt;% mutate(food_regime = factor(food_regime, levels = c(&quot;Initial&quot;, &quot;Low&quot;, &quot;High&quot;))) ## Rows: 72 Columns: 3 ## ── Column specification ────────────────────────────── ## Delimiter: &quot;,&quot; ## chr (1): TREAT ## dbl (2): IV, SUTW ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. urchins ## # A tibble: 72 × 3 ## food_regime initial_volume width ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Initial 3.5 0.01 ## 2 Initial 5 0.02 ## 3 Initial 8 0.061 ## 4 Initial 10 0.051 ## 5 Initial 13 0.041 ## 6 Initial 13 0.061 ## 7 Initial 15 0.041 ## 8 Initial 15 0.071 ## 9 Initial 16 0.092 ## 10 Initial 17 0.051 ## # … with 62 more rows As a first step in modeling, it’s always a good idea to plot the data ggplot(urchins, aes(x = initial_volume, y = width, group = food_regime, col = food_regime)) + geom_point() + geom_smooth(method = lm, se = FALSE) + scale_color_viridis_d(option = &quot;plasma&quot;, end = .7) ## `geom_smooth()` using formula &#39;y ~ x&#39; # create linear model lm_mod &lt;- linear_reg() %&gt;% set_engine(&quot;lm&quot;) # fit data lm_fit &lt;- lm_mod %&gt;% fit(width ~ initial_volume * food_regime, data = urchins) lm_fit ## parsnip model object ## ## Fit time: 3ms ## ## Call: ## stats::lm(formula = width ~ initial_volume * food_regime, data = data) ## ## Coefficients: ## (Intercept) ## 0.0331216 ## initial_volume ## 0.0015546 ## food_regimeLow ## 0.0197824 ## food_regimeHigh ## 0.0214111 ## initial_volume:food_regimeLow ## -0.0012594 ## initial_volume:food_regimeHigh ## 0.0005254 tidy(lm_fit) ## # A tibble: 6 × 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 3.31e-2 0.00962 3.44 1.00e-3 ## 2 initial_volume 1.55e-3 0.000398 3.91 2.22e-4 ## 3 food_regimeLow 1.98e-2 0.0130 1.52 1.33e-1 ## 4 food_regimeHigh 2.14e-2 0.0145 1.47 1.45e-1 ## 5 initial_volume… -1.26e-3 0.000510 -2.47 1.62e-2 ## 6 initial_volume… 5.25e-4 0.000702 0.748 4.57e-1 tidy(lm_fit) %&gt;% dwplot(dot_args = list(size = 2, color = &quot;black&quot;), whisker_args = list(color = &quot;black&quot;), vline = geom_vline(xintercept = 0, colour = &quot;grey50&quot;, linetype = 2)) Use a model to predict new_points &lt;- expand.grid(initial_volume = 20, food_regime = c(&quot;Initial&quot;, &quot;Low&quot;, &quot;High&quot;)) new_points ## initial_volume food_regime ## 1 20 Initial ## 2 20 Low ## 3 20 High #&gt; initial_volume food_regime #&gt; 1 20 Initial #&gt; 2 20 Low #&gt; 3 20 High mean_pred &lt;- predict(lm_fit, new_data = new_points) mean_pred ## # A tibble: 3 × 1 ## .pred ## &lt;dbl&gt; ## 1 0.0642 ## 2 0.0588 ## 3 0.0961 conf_int_pred &lt;- predict(lm_fit, new_data = new_points, type = &quot;conf_int&quot;) conf_int_pred ## # A tibble: 3 × 2 ## .pred_lower .pred_upper ## &lt;dbl&gt; &lt;dbl&gt; ## 1 0.0555 0.0729 ## 2 0.0499 0.0678 ## 3 0.0870 0.105 #&gt; # A tibble: 3 x 2 #&gt; .pred_lower .pred_upper #&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0.0555 0.0729 #&gt; 2 0.0499 0.0678 #&gt; 3 0.0870 0.105 # Now combine: plot_data &lt;- new_points %&gt;% bind_cols(mean_pred) %&gt;% bind_cols(conf_int_pred) # and plot: ggplot(plot_data, aes(x = food_regime)) + geom_point(aes(y = .pred)) + geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) + labs(y = &quot;urchin size&quot;) Model with different engine: Bayesian analysis # set prior distribution prior_dist &lt;- rstanarm::student_t(df = 1) set.seed(123) # make the parsnip model bayes_mod &lt;- linear_reg() %&gt;% set_engine(&quot;stan&quot;, prior_intercept = prior_dist, prior = prior_dist) # train model bayes_fit &lt;- bayes_mod %&gt;% fit(width ~ initial_volume * food_regime, data = urchins) print(bayes_fit, digits=5) ## parsnip model object ## ## Fit time: 9.1s ## stan_glm ## family: gaussian [identity] ## formula: width ~ initial_volume * food_regime ## observations: 72 ## predictors: 6 ## ------ ## Median MAD_SD ## (Intercept) 0.03281 0.00992 ## initial_volume 0.00157 0.00041 ## food_regimeLow 0.01990 0.01286 ## food_regimeHigh 0.02136 0.01519 ## initial_volume:food_regimeLow -0.00126 0.00052 ## initial_volume:food_regimeHigh 0.00052 0.00073 ## ## Auxiliary parameter(s): ## Median MAD_SD ## sigma 0.02144 0.00192 ## ## ------ ## * For help interpreting the printed output see ?print.stanreg ## * For info on the priors used see ?prior_summary.stanreg tidy(bayes_fit, conf.int = TRUE) ## # A tibble: 6 × 5 ## term estimate std.error conf.low conf.high ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 3.28e-2 0.00992 1.68e-2 0.0488 ## 2 initial_volume 1.57e-3 0.000405 8.93e-4 0.00224 ## 3 food_regimeLow 1.99e-2 0.0129 -1.40e-3 0.0420 ## 4 food_regimeHi… 2.14e-2 0.0152 -3.56e-3 0.0464 ## 5 initial_volum… -1.26e-3 0.000516 -2.10e-3 -0.000407 ## 6 initial_volum… 5.17e-4 0.000732 -6.91e-4 0.00171 bayes_plot_data &lt;- new_points %&gt;% bind_cols(predict(bayes_fit, new_data = new_points)) %&gt;% bind_cols(predict(bayes_fit, new_data = new_points, type = &quot;conf_int&quot;)) ggplot(bayes_plot_data, aes(x = food_regime)) + geom_point(aes(y = .pred)) + geom_errorbar(aes(ymin = .pred_lower, ymax = .pred_upper), width = .2) + labs(y = &quot;urchin size&quot;) + ggtitle(&quot;Bayesian model with t(1) prior distribution&quot;) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
